import { Client as NotionClient, Logger, LogLevel } from '@notionhq/client';
import { GetBlockResponse, GetDatabaseResponse, GetPageResponse, GetUserResponse, QueryDatabaseParameters } from '@notionhq/client/build/src/api-endpoints';
import { Assert } from '@notionhq/client/build/src/type-utils';
/** @private */
export declare const DEBUG: import("debug").Debugger;
declare const DEBUG_API: import("debug").Debugger;
declare type NotionClientLoggers = {
    [K in LogLevel]: typeof DEBUG_API;
};
/**
 * A logger for the @notionhq/client Client that logs to the @jitl/notion-api
 * namespace.
 * @category API
 */
export declare type NotionClientDebugLogger = Logger & NotionClientLoggers;
/**
 * @category API
 *
 * A logger for the @notionhq/client Client that logs to the @jitl/notion-api
 * namespace.
 *
 *
 * @example
 * ```typescript
 * const client = new NotionClient({
 *   logger: NotionClientDebugLogger,
 *   // ...
 * })
 * ```
 */
export declare const NotionClientDebugLogger: NotionClientDebugLogger;
export { 
/**
 * The official @notionhq/client API Client.
 * (Renamed for easy, unambiguous tab-completion/automatic import.)
 */
NotionClient, };
/**
 * Object with no properties.
 * @category API
 */
export declare type EmptyObject = Record<string, never>;
/**
 * A page of results from the Notion API.
 * @source
 * @category API
 */
export interface PaginatedList<T> {
    object: 'list';
    results: T[];
    next_cursor: string | null;
    has_more: boolean;
}
/**
 * Common arguments for paginated APIs.
 * @source
 * @category API
 */
export interface PaginatedArgs {
    start_cursor?: string;
    page_size?: number;
}
/**
 * Iterate over all results in a paginated list API.
 *
 * ```typescript
 * for await (const block of iteratePaginatedAPI(notion.blocks.children.list, {
 *   block_id: parentBlockId,
 * })) {
 *   // Do something with block.
 * }
 * ```
 *
 * @param listFn API to call
 * @param firstPageArgs These arguments are used for each page, with an updated `start_cursor`.
 * @category API
 */
export declare function iteratePaginatedAPI<Args extends PaginatedArgs, Item>(listFn: (args: Args) => Promise<PaginatedList<Item>>, firstPageArgs: Args): AsyncIterableIterator<Item>;
/**
 * Gather all an async iterable's items into an array.
 * ```typescript
 * const iterator = iteratePaginatedAPI(notion.blocks.children.list, { block_id: parentBlockId });
 * const blocks = await asyncIterableToArray(iterator);
 * const paragraphs = blocks.filter(block => isFullBlock(block, 'paragraph'))
 * ```
 * @category API
 */
export declare function asyncIterableToArray<T>(iterable: AsyncIterable<T>): Promise<Array<T>>;
/**
 * A full Notion API page.
 * @category Page
 */
export declare type Page = Extract<GetPageResponse, {
    parent: unknown;
}>;
/**
 * The Notion API may return a "partial" page object if your API token can't
 * access the page.
 *
 * This function confirms that all page data is available.
 * @category Page
 */
export declare function isFullPage(page: GetPageResponse): page is Page;
/**
 * An extension of the Notion API page type that ads a `children` attribute
 * forming a recursive tree of blocks.
 * @category Page
 */
export declare type PageWithChildren = Page & {
    children: BlockWithChildren[];
};
/**
 * @category Page
 */
export declare function isPageWithChildren(page: GetPageResponse): page is PageWithChildren;
declare type AnyBlock = Extract<GetBlockResponse, {
    type: string;
}>;
/**
 * Type of any block.
 * @category Block
 */
export declare type BlockType = AnyBlock['type'];
/**
 * A full Notion API block.
 * @category Block
 */
export declare type Block<Type extends BlockType = BlockType> = Extract<AnyBlock, {
    type: Type;
}>;
/**
 * The Notion API may return a "partial" block object if your API token can't
 * access the block.
 *
 * This function confirms that all block data is available.
 * @category Block
 */
export declare function isFullBlock(block: GetBlockResponse): block is Block;
/**
 * The Notion API may return a "partial" block object if your API token can't
 * access the block.
 *
 * This function confirms that all block data is available, and the block has
 * type `blockType`.
 * @category Block
 */
export declare function isFullBlock<Type extends BlockType>(block: GetBlockResponse, blockType: Type): block is Block<Type>;
/**
 * Filter function returned by [[isFullBlockFilter]].
 * @category Block
 */
export interface BlockFilterFunction<Type extends BlockType> {
    (block: GetBlockResponse): block is Block<Type>;
    (block: BlockWithChildren): block is BlockWithChildren<Type>;
}
/**
 * Returns a filter type guard for blocks of the given `type`.
 * See [[isFullBlock]] for more information.
 *
 * ```typescript
 * const paragraphs: Array<Block<"paragraph">> = blocks.filter(isFullBlockFilter("paragraph"));
 * ```
 *
 * @category Block
 */
export declare function isFullBlockFilter<Type extends BlockType>(type: Type): BlockFilterFunction<Type>;
declare type BlockTypeMap = {
    [K in BlockType]: Block<K>;
};
/**
 * Type-level map from a [[BlockType]] to the data of that block.
 * @category Block
 * @source
 */
export declare type BlockDataMap = {
    [K in BlockType]: BlockTypeMap[K] extends {
        [key in K]: unknown;
    } ? BlockTypeMap[K][K] : never;
};
/**
 * Generic way to get a block's data.
 * @category Block
 */
export declare function getBlockData<Type extends BlockType>(block: Block<Type>): BlockDataMap[Type];
/**
 * An extension of the Notion API block type that adds a `children` attribute
 * forming a recursive tree of blocks.
 * @category Block
 */
export declare type BlockWithChildren<Type extends BlockType = BlockType> = Block<Type> & {
    children: BlockWithChildren[];
};
/**
 * @category Block
 */
export declare function isBlockWithChildren(block: GetBlockResponse): block is BlockWithChildren;
/**
 * Fetch all supported children of a block.
 * @category Block
 */
export declare function getChildBlocks(notion: NotionClient, parentBlockId: string): Promise<Block[]>;
/**
 * Recursively fetch all children of `parentBlockId` as `BlockWithChildren`.
 * This function can be used to fetch an entire page's contents in one call.
 * @category Block
 */
export declare function getChildBlocksWithChildrenRecursively(notion: NotionClient, parentId: string): Promise<BlockWithChildren[]>;
/**
 * @category Block
 */
export declare function getBlockWithChildren(notion: NotionClient, blockId: string): Promise<BlockWithChildren | undefined>;
/**
 * Recurse over the blocks and their children, calling `fn` on each block.
 * @category Block
 */
export declare function visitChildBlocks(blocks: BlockWithChildren[], fn: (block: BlockWithChildren) => void): void;
declare const RICH_TEXT_BLOCK_PROPERTY = "rich_text";
/**
 * Notion API rich text. An array of rich text tokens.
 * @category Rich Text
 */
export declare type RichText = Block<'paragraph'>['paragraph'][typeof RICH_TEXT_BLOCK_PROPERTY];
/**
 * A single token of rich text.
 * @category Rich Text
 */
export declare type RichTextToken = RichText[number];
declare type AnyMention = Extract<RichTextToken, {
    type: 'mention';
}>;
/**
 * The type of mention.
 * @category Rich Text
 */
export declare type MentionType = AnyMention['mention']['type'];
/**
 * The data of a mention type.
 * @category Rich Text
 */
export declare type MentionData<Type extends MentionType> = Extract<AnyMention['mention'], {
    type: Type;
}>;
/**
 * A mention token.
 * (This type doesn't seem to work very well.)
 * @category Rich Text
 */
export declare type Mention<Type extends MentionType = MentionType> = Omit<AnyMention, 'mention'> & {
    mention: MentionData<Type>;
};
/**
 * @returns Plaintext string of rich text.
 * @category Rich Text
 */
export declare function richTextAsPlainText(richText: string | RichText | undefined): string;
declare type DateMentionData = MentionData<'date'>;
/**
 * Notion date type.
 * @category Date
 */
export declare type DateResponse = DateMentionData['date'];
/**
 * Convert a Notion date's start into a Javascript Date object.
 * @category Date
 */
export declare function notionDateStartAsDate(date: DateResponse | Date): Date;
/**
 * Convert a Notion date's start into a Javascript Date object.
 * @category Date
 */
export declare function notionDateStartAsDate(date: DateResponse | Date | undefined): Date | undefined;
/**
 * Visit all text tokens in a block or page. Relations are treated as mention
 * tokens. Does not consider children.
 * @category Rich Text
 */
export declare function visitTextTokens(object: Block | Page, fn: (token: RichTextToken) => void): void;
/**
 * Person or Bot
 * @category User
 */
export declare type User = GetUserResponse;
/**
 * Person
 * @category User
 */
export declare type Person = Extract<User, {
    type: 'person';
}>;
/**
 * Bot
 * @category User
 */
export declare type Bot = Extract<User, {
    type: 'bot';
}>;
/**
 * Any kind of filter in a database query.
 * @category Query
 */
export declare type Filter = NonNullable<QueryDatabaseParameters['filter']>;
/**
 * @category Query
 */
export declare type AnyPropertyFilter = Extract<Filter, {
    type?: string;
}>;
/**
 * Type of a property filter.
 * @category Query
 */
export declare type PropertyFilterType = AnyPropertyFilter['type'];
/**
 * Property filters in a database query.
 * @category Query
 */
export declare type PropertyFilter<Type extends PropertyFilterType = PropertyFilterType> = Extract<AnyPropertyFilter, {
    type?: Type;
}>;
/**
 * @category Property
 * @source
 */
declare type PropertyFilterTypeMap = {
    [K in PropertyType]: PropertyFilter<K>;
};
/**
 * Type-level map from property type to the inner filter of that property
 * @category Property
 * @source
 */
export declare type PropertyFilterDataMap = {
    [K in PropertyType]: PropertyFilterTypeMap[K] extends {
        [key in K]: unknown;
    } ? PropertyFilterTypeMap[K][K] : never;
};
/**
 * Filter builder functions.
 * @category Query
 */
export declare const Filter: {
    /**
     * Syntax sugar for building a [[PropertyFilter]].
     */
    readonly property: <Type extends "number" | "created_time" | "created_by" | "last_edited_time" | "last_edited_by" | "rich_text" | "date" | "url" | "select" | "multi_select" | "email" | "phone_number" | "checkbox" | "files" | "formula" | "title" | "people" | "relation" | "rollup" | undefined>(filter: PropertyFilter<Type>) => PropertyFilter<Type>;
    /**
     * Build a [[CompoundFilter]] from multiple arguments, or otherwise
     * return the only filter.
     *
     * Note that the Notion API limits filter depth, but this function does not.
     */
    readonly compound: (type: 'or' | 'and', ...filters: Array<Filter | undefined | false>) => Filter | undefined;
    /**
     * @returns True if `filter` is a [[CompoundFilter]].
     */
    readonly isCompound: (filter: Filter) => filter is CompoundFilter;
    /**
     * Build an `and` [[CompoundFilter]] from multiple arguments, or otherwise
     * return the only filter.
     *
     * Note that the Notion API limits filter depth, but this function does not.
     */
    readonly and: (...filters: Array<Filter | undefined | false>) => Filter | undefined;
    /**
     * @returns True if `filter` is an `and` [[CompoundFilter]].
     */
    readonly isAnd: (filter: Filter) => filter is {
        and: (({
            title: {
                equals: string;
            } | {
                does_not_equal: string;
            } | {
                contains: string;
            } | {
                does_not_contain: string;
            } | {
                starts_with: string;
            } | {
                ends_with: string;
            } | ({
                is_empty: true;
            } | {
                is_not_empty: true;
            });
            property: string;
            type?: "title" | undefined;
        } | {
            rich_text: {
                equals: string;
            } | {
                does_not_equal: string;
            } | {
                contains: string;
            } | {
                does_not_contain: string;
            } | {
                starts_with: string;
            } | {
                ends_with: string;
            } | ({
                is_empty: true;
            } | {
                is_not_empty: true;
            });
            property: string;
            type?: "rich_text" | undefined;
        } | {
            number: ({
                is_empty: true;
            } | {
                is_not_empty: true;
            }) | {
                equals: number;
            } | {
                does_not_equal: number;
            } | {
                greater_than: number;
            } | {
                less_than: number;
            } | {
                greater_than_or_equal_to: number;
            } | {
                less_than_or_equal_to: number;
            };
            property: string;
            type?: "number" | undefined;
        } | {
            checkbox: {
                equals: boolean;
            } | {
                does_not_equal: boolean;
            };
            property: string;
            type?: "checkbox" | undefined;
        } | {
            select: ({
                is_empty: true;
            } | {
                is_not_empty: true;
            }) | {
                equals: string;
            } | {
                does_not_equal: string;
            };
            property: string;
            type?: "select" | undefined;
        } | {
            multi_select: ({
                is_empty: true;
            } | {
                is_not_empty: true;
            }) | {
                contains: string;
            } | {
                does_not_contain: string;
            };
            property: string;
            type?: "multi_select" | undefined;
        } | {
            date: ({
                is_empty: true;
            } | {
                is_not_empty: true;
            }) | {
                equals: string;
            } | {
                before: string;
            } | {
                after: string;
            } | {
                on_or_before: string;
            } | {
                on_or_after: string;
            } | {
                past_week: {
                    [x: string]: never;
                };
            } | {
                past_month: {
                    [x: string]: never;
                };
            } | {
                past_year: {
                    [x: string]: never;
                };
            } | {
                next_week: {
                    [x: string]: never;
                };
            } | {
                next_month: {
                    [x: string]: never;
                };
            } | {
                next_year: {
                    [x: string]: never;
                };
            };
            property: string;
            type?: "date" | undefined;
        } | {
            people: ({
                is_empty: true;
            } | {
                is_not_empty: true;
            }) | {
                contains: string;
            } | {
                does_not_contain: string;
            };
            property: string;
            type?: "people" | undefined;
        } | {
            files: {
                is_empty: true;
            } | {
                is_not_empty: true;
            };
            property: string;
            type?: "files" | undefined;
        } | {
            url: {
                equals: string;
            } | {
                does_not_equal: string;
            } | {
                contains: string;
            } | {
                does_not_contain: string;
            } | {
                starts_with: string;
            } | {
                ends_with: string;
            } | ({
                is_empty: true;
            } | {
                is_not_empty: true;
            });
            property: string;
            type?: "url" | undefined;
        } | {
            email: {
                equals: string;
            } | {
                does_not_equal: string;
            } | {
                contains: string;
            } | {
                does_not_contain: string;
            } | {
                starts_with: string;
            } | {
                ends_with: string;
            } | ({
                is_empty: true;
            } | {
                is_not_empty: true;
            });
            property: string;
            type?: "email" | undefined;
        } | {
            phone_number: {
                equals: string;
            } | {
                does_not_equal: string;
            } | {
                contains: string;
            } | {
                does_not_contain: string;
            } | {
                starts_with: string;
            } | {
                ends_with: string;
            } | ({
                is_empty: true;
            } | {
                is_not_empty: true;
            });
            property: string;
            type?: "phone_number" | undefined;
        } | {
            relation: ({
                is_empty: true;
            } | {
                is_not_empty: true;
            }) | {
                contains: string;
            } | {
                does_not_contain: string;
            };
            property: string;
            type?: "relation" | undefined;
        } | {
            created_by: ({
                is_empty: true;
            } | {
                is_not_empty: true;
            }) | {
                contains: string;
            } | {
                does_not_contain: string;
            };
            property: string;
            type?: "created_by" | undefined;
        } | {
            created_time: ({
                is_empty: true;
            } | {
                is_not_empty: true;
            }) | {
                equals: string;
            } | {
                before: string;
            } | {
                after: string;
            } | {
                on_or_before: string;
            } | {
                on_or_after: string;
            } | {
                past_week: {
                    [x: string]: never;
                };
            } | {
                past_month: {
                    [x: string]: never;
                };
            } | {
                past_year: {
                    [x: string]: never;
                };
            } | {
                next_week: {
                    [x: string]: never;
                };
            } | {
                next_month: {
                    [x: string]: never;
                };
            } | {
                next_year: {
                    [x: string]: never;
                };
            };
            property: string;
            type?: "created_time" | undefined;
        } | {
            last_edited_by: ({
                is_empty: true;
            } | {
                is_not_empty: true;
            }) | {
                contains: string;
            } | {
                does_not_contain: string;
            };
            property: string;
            type?: "last_edited_by" | undefined;
        } | {
            last_edited_time: ({
                is_empty: true;
            } | {
                is_not_empty: true;
            }) | {
                equals: string;
            } | {
                before: string;
            } | {
                after: string;
            } | {
                on_or_before: string;
            } | {
                on_or_after: string;
            } | {
                past_week: {
                    [x: string]: never;
                };
            } | {
                past_month: {
                    [x: string]: never;
                };
            } | {
                past_year: {
                    [x: string]: never;
                };
            } | {
                next_week: {
                    [x: string]: never;
                };
            } | {
                next_month: {
                    [x: string]: never;
                };
            } | {
                next_year: {
                    [x: string]: never;
                };
            };
            property: string;
            type?: "last_edited_time" | undefined;
        } | {
            formula: {
                string: {
                    equals: string;
                } | {
                    does_not_equal: string;
                } | {
                    contains: string;
                } | {
                    does_not_contain: string;
                } | {
                    starts_with: string;
                } | {
                    ends_with: string;
                } | ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                });
            } | {
                checkbox: {
                    equals: boolean;
                } | {
                    does_not_equal: boolean;
                };
            } | {
                number: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    equals: number;
                } | {
                    does_not_equal: number;
                } | {
                    greater_than: number;
                } | {
                    less_than: number;
                } | {
                    greater_than_or_equal_to: number;
                } | {
                    less_than_or_equal_to: number;
                };
            } | {
                date: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    equals: string;
                } | {
                    before: string;
                } | {
                    after: string;
                } | {
                    on_or_before: string;
                } | {
                    on_or_after: string;
                } | {
                    past_week: {
                        [x: string]: never;
                    };
                } | {
                    past_month: {
                        [x: string]: never;
                    };
                } | {
                    past_year: {
                        [x: string]: never;
                    };
                } | {
                    next_week: {
                        [x: string]: never;
                    };
                } | {
                    next_month: {
                        [x: string]: never;
                    };
                } | {
                    next_year: {
                        [x: string]: never;
                    };
                };
            };
            property: string;
            type?: "formula" | undefined;
        } | {
            rollup: {
                any: {
                    rich_text: {
                        equals: string;
                    } | {
                        does_not_equal: string;
                    } | {
                        contains: string;
                    } | {
                        does_not_contain: string;
                    } | {
                        starts_with: string;
                    } | {
                        ends_with: string;
                    } | ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    });
                } | {
                    number: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: number;
                    } | {
                        does_not_equal: number;
                    } | {
                        greater_than: number;
                    } | {
                        less_than: number;
                    } | {
                        greater_than_or_equal_to: number;
                    } | {
                        less_than_or_equal_to: number;
                    };
                } | {
                    checkbox: {
                        equals: boolean;
                    } | {
                        does_not_equal: boolean;
                    };
                } | {
                    select: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: string;
                    } | {
                        does_not_equal: string;
                    };
                } | {
                    multi_select: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        contains: string;
                    } | {
                        does_not_contain: string;
                    };
                } | {
                    relation: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        contains: string;
                    } | {
                        does_not_contain: string;
                    };
                } | {
                    date: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: string;
                    } | {
                        before: string;
                    } | {
                        after: string;
                    } | {
                        on_or_before: string;
                    } | {
                        on_or_after: string;
                    } | {
                        past_week: {
                            [x: string]: never;
                        };
                    } | {
                        past_month: {
                            [x: string]: never;
                        };
                    } | {
                        past_year: {
                            [x: string]: never;
                        };
                    } | {
                        next_week: {
                            [x: string]: never;
                        };
                    } | {
                        next_month: {
                            [x: string]: never;
                        };
                    } | {
                        next_year: {
                            [x: string]: never;
                        };
                    };
                } | {
                    people: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        contains: string;
                    } | {
                        does_not_contain: string;
                    };
                } | {
                    files: {
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    };
                };
            } | {
                none: {
                    rich_text: {
                        equals: string;
                    } | {
                        does_not_equal: string;
                    } | {
                        contains: string;
                    } | {
                        does_not_contain: string;
                    } | {
                        starts_with: string;
                    } | {
                        ends_with: string;
                    } | ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    });
                } | {
                    number: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: number;
                    } | {
                        does_not_equal: number;
                    } | {
                        greater_than: number;
                    } | {
                        less_than: number;
                    } | {
                        greater_than_or_equal_to: number;
                    } | {
                        less_than_or_equal_to: number;
                    };
                } | {
                    checkbox: {
                        equals: boolean;
                    } | {
                        does_not_equal: boolean;
                    };
                } | {
                    select: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: string;
                    } | {
                        does_not_equal: string;
                    };
                } | {
                    multi_select: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        contains: string;
                    } | {
                        does_not_contain: string;
                    };
                } | {
                    relation: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        contains: string;
                    } | {
                        does_not_contain: string;
                    };
                } | {
                    date: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: string;
                    } | {
                        before: string;
                    } | {
                        after: string;
                    } | {
                        on_or_before: string;
                    } | {
                        on_or_after: string;
                    } | {
                        past_week: {
                            [x: string]: never;
                        };
                    } | {
                        past_month: {
                            [x: string]: never;
                        };
                    } | {
                        past_year: {
                            [x: string]: never;
                        };
                    } | {
                        next_week: {
                            [x: string]: never;
                        };
                    } | {
                        next_month: {
                            [x: string]: never;
                        };
                    } | {
                        next_year: {
                            [x: string]: never;
                        };
                    };
                } | {
                    people: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        contains: string;
                    } | {
                        does_not_contain: string;
                    };
                } | {
                    files: {
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    };
                };
            } | {
                every: {
                    rich_text: {
                        equals: string;
                    } | {
                        does_not_equal: string;
                    } | {
                        contains: string;
                    } | {
                        does_not_contain: string;
                    } | {
                        starts_with: string;
                    } | {
                        ends_with: string;
                    } | ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    });
                } | {
                    number: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: number;
                    } | {
                        does_not_equal: number;
                    } | {
                        greater_than: number;
                    } | {
                        less_than: number;
                    } | {
                        greater_than_or_equal_to: number;
                    } | {
                        less_than_or_equal_to: number;
                    };
                } | {
                    checkbox: {
                        equals: boolean;
                    } | {
                        does_not_equal: boolean;
                    };
                } | {
                    select: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: string;
                    } | {
                        does_not_equal: string;
                    };
                } | {
                    multi_select: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        contains: string;
                    } | {
                        does_not_contain: string;
                    };
                } | {
                    relation: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        contains: string;
                    } | {
                        does_not_contain: string;
                    };
                } | {
                    date: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: string;
                    } | {
                        before: string;
                    } | {
                        after: string;
                    } | {
                        on_or_before: string;
                    } | {
                        on_or_after: string;
                    } | {
                        past_week: {
                            [x: string]: never;
                        };
                    } | {
                        past_month: {
                            [x: string]: never;
                        };
                    } | {
                        past_year: {
                            [x: string]: never;
                        };
                    } | {
                        next_week: {
                            [x: string]: never;
                        };
                    } | {
                        next_month: {
                            [x: string]: never;
                        };
                    } | {
                        next_year: {
                            [x: string]: never;
                        };
                    };
                } | {
                    people: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        contains: string;
                    } | {
                        does_not_contain: string;
                    };
                } | {
                    files: {
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    };
                };
            } | {
                date: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    equals: string;
                } | {
                    before: string;
                } | {
                    after: string;
                } | {
                    on_or_before: string;
                } | {
                    on_or_after: string;
                } | {
                    past_week: {
                        [x: string]: never;
                    };
                } | {
                    past_month: {
                        [x: string]: never;
                    };
                } | {
                    past_year: {
                        [x: string]: never;
                    };
                } | {
                    next_week: {
                        [x: string]: never;
                    };
                } | {
                    next_month: {
                        [x: string]: never;
                    };
                } | {
                    next_year: {
                        [x: string]: never;
                    };
                };
            } | {
                number: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    equals: number;
                } | {
                    does_not_equal: number;
                } | {
                    greater_than: number;
                } | {
                    less_than: number;
                } | {
                    greater_than_or_equal_to: number;
                } | {
                    less_than_or_equal_to: number;
                };
            };
            property: string;
            type?: "rollup" | undefined;
        }) | {
            created_time: ({
                is_empty: true;
            } | {
                is_not_empty: true;
            }) | {
                equals: string;
            } | {
                before: string;
            } | {
                after: string;
            } | {
                on_or_before: string;
            } | {
                on_or_after: string;
            } | {
                past_week: {
                    [x: string]: never;
                };
            } | {
                past_month: {
                    [x: string]: never;
                };
            } | {
                past_year: {
                    [x: string]: never;
                };
            } | {
                next_week: {
                    [x: string]: never;
                };
            } | {
                next_month: {
                    [x: string]: never;
                };
            } | {
                next_year: {
                    [x: string]: never;
                };
            };
            timestamp: "created_time";
            type?: "created_time" | undefined;
        } | {
            last_edited_time: ({
                is_empty: true;
            } | {
                is_not_empty: true;
            }) | {
                equals: string;
            } | {
                before: string;
            } | {
                after: string;
            } | {
                on_or_before: string;
            } | {
                on_or_after: string;
            } | {
                past_week: {
                    [x: string]: never;
                };
            } | {
                past_month: {
                    [x: string]: never;
                };
            } | {
                past_year: {
                    [x: string]: never;
                };
            } | {
                next_week: {
                    [x: string]: never;
                };
            } | {
                next_month: {
                    [x: string]: never;
                };
            } | {
                next_year: {
                    [x: string]: never;
                };
            };
            timestamp: "last_edited_time";
            type?: "last_edited_time" | undefined;
        } | {
            or: ({
                title: {
                    equals: string;
                } | {
                    does_not_equal: string;
                } | {
                    contains: string;
                } | {
                    does_not_contain: string;
                } | {
                    starts_with: string;
                } | {
                    ends_with: string;
                } | ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                });
                property: string;
                type?: "title" | undefined;
            } | {
                rich_text: {
                    equals: string;
                } | {
                    does_not_equal: string;
                } | {
                    contains: string;
                } | {
                    does_not_contain: string;
                } | {
                    starts_with: string;
                } | {
                    ends_with: string;
                } | ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                });
                property: string;
                type?: "rich_text" | undefined;
            } | {
                number: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    equals: number;
                } | {
                    does_not_equal: number;
                } | {
                    greater_than: number;
                } | {
                    less_than: number;
                } | {
                    greater_than_or_equal_to: number;
                } | {
                    less_than_or_equal_to: number;
                };
                property: string;
                type?: "number" | undefined;
            } | {
                checkbox: {
                    equals: boolean;
                } | {
                    does_not_equal: boolean;
                };
                property: string;
                type?: "checkbox" | undefined;
            } | {
                select: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    equals: string;
                } | {
                    does_not_equal: string;
                };
                property: string;
                type?: "select" | undefined;
            } | {
                multi_select: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    contains: string;
                } | {
                    does_not_contain: string;
                };
                property: string;
                type?: "multi_select" | undefined;
            } | {
                date: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    equals: string;
                } | {
                    before: string;
                } | {
                    after: string;
                } | {
                    on_or_before: string;
                } | {
                    on_or_after: string;
                } | {
                    past_week: {
                        [x: string]: never;
                    };
                } | {
                    past_month: {
                        [x: string]: never;
                    };
                } | {
                    past_year: {
                        [x: string]: never;
                    };
                } | {
                    next_week: {
                        [x: string]: never;
                    };
                } | {
                    next_month: {
                        [x: string]: never;
                    };
                } | {
                    next_year: {
                        [x: string]: never;
                    };
                };
                property: string;
                type?: "date" | undefined;
            } | {
                people: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    contains: string;
                } | {
                    does_not_contain: string;
                };
                property: string;
                type?: "people" | undefined;
            } | {
                files: {
                    is_empty: true;
                } | {
                    is_not_empty: true;
                };
                property: string;
                type?: "files" | undefined;
            } | {
                url: {
                    equals: string;
                } | {
                    does_not_equal: string;
                } | {
                    contains: string;
                } | {
                    does_not_contain: string;
                } | {
                    starts_with: string;
                } | {
                    ends_with: string;
                } | ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                });
                property: string;
                type?: "url" | undefined;
            } | {
                email: {
                    equals: string;
                } | {
                    does_not_equal: string;
                } | {
                    contains: string;
                } | {
                    does_not_contain: string;
                } | {
                    starts_with: string;
                } | {
                    ends_with: string;
                } | ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                });
                property: string;
                type?: "email" | undefined;
            } | {
                phone_number: {
                    equals: string;
                } | {
                    does_not_equal: string;
                } | {
                    contains: string;
                } | {
                    does_not_contain: string;
                } | {
                    starts_with: string;
                } | {
                    ends_with: string;
                } | ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                });
                property: string;
                type?: "phone_number" | undefined;
            } | {
                relation: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    contains: string;
                } | {
                    does_not_contain: string;
                };
                property: string;
                type?: "relation" | undefined;
            } | {
                created_by: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    contains: string;
                } | {
                    does_not_contain: string;
                };
                property: string;
                type?: "created_by" | undefined;
            } | {
                created_time: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    equals: string;
                } | {
                    before: string;
                } | {
                    after: string;
                } | {
                    on_or_before: string;
                } | {
                    on_or_after: string;
                } | {
                    past_week: {
                        [x: string]: never;
                    };
                } | {
                    past_month: {
                        [x: string]: never;
                    };
                } | {
                    past_year: {
                        [x: string]: never;
                    };
                } | {
                    next_week: {
                        [x: string]: never;
                    };
                } | {
                    next_month: {
                        [x: string]: never;
                    };
                } | {
                    next_year: {
                        [x: string]: never;
                    };
                };
                property: string;
                type?: "created_time" | undefined;
            } | {
                last_edited_by: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    contains: string;
                } | {
                    does_not_contain: string;
                };
                property: string;
                type?: "last_edited_by" | undefined;
            } | {
                last_edited_time: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    equals: string;
                } | {
                    before: string;
                } | {
                    after: string;
                } | {
                    on_or_before: string;
                } | {
                    on_or_after: string;
                } | {
                    past_week: {
                        [x: string]: never;
                    };
                } | {
                    past_month: {
                        [x: string]: never;
                    };
                } | {
                    past_year: {
                        [x: string]: never;
                    };
                } | {
                    next_week: {
                        [x: string]: never;
                    };
                } | {
                    next_month: {
                        [x: string]: never;
                    };
                } | {
                    next_year: {
                        [x: string]: never;
                    };
                };
                property: string;
                type?: "last_edited_time" | undefined;
            } | {
                formula: {
                    string: {
                        equals: string;
                    } | {
                        does_not_equal: string;
                    } | {
                        contains: string;
                    } | {
                        does_not_contain: string;
                    } | {
                        starts_with: string;
                    } | {
                        ends_with: string;
                    } | ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    });
                } | {
                    checkbox: {
                        equals: boolean;
                    } | {
                        does_not_equal: boolean;
                    };
                } | {
                    number: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: number;
                    } | {
                        does_not_equal: number;
                    } | {
                        greater_than: number;
                    } | {
                        less_than: number;
                    } | {
                        greater_than_or_equal_to: number;
                    } | {
                        less_than_or_equal_to: number;
                    };
                } | {
                    date: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: string;
                    } | {
                        before: string;
                    } | {
                        after: string;
                    } | {
                        on_or_before: string;
                    } | {
                        on_or_after: string;
                    } | {
                        past_week: {
                            [x: string]: never;
                        };
                    } | {
                        past_month: {
                            [x: string]: never;
                        };
                    } | {
                        past_year: {
                            [x: string]: never;
                        };
                    } | {
                        next_week: {
                            [x: string]: never;
                        };
                    } | {
                        next_month: {
                            [x: string]: never;
                        };
                    } | {
                        next_year: {
                            [x: string]: never;
                        };
                    };
                };
                property: string;
                type?: "formula" | undefined;
            } | {
                rollup: {
                    any: {
                        rich_text: {
                            equals: string;
                        } | {
                            does_not_equal: string;
                        } | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        } | {
                            starts_with: string;
                        } | {
                            ends_with: string;
                        } | ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        });
                    } | {
                        number: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: number;
                        } | {
                            does_not_equal: number;
                        } | {
                            greater_than: number;
                        } | {
                            less_than: number;
                        } | {
                            greater_than_or_equal_to: number;
                        } | {
                            less_than_or_equal_to: number;
                        };
                    } | {
                        checkbox: {
                            equals: boolean;
                        } | {
                            does_not_equal: boolean;
                        };
                    } | {
                        select: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: string;
                        } | {
                            does_not_equal: string;
                        };
                    } | {
                        multi_select: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        relation: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        date: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: string;
                        } | {
                            before: string;
                        } | {
                            after: string;
                        } | {
                            on_or_before: string;
                        } | {
                            on_or_after: string;
                        } | {
                            past_week: {
                                [x: string]: never;
                            };
                        } | {
                            past_month: {
                                [x: string]: never;
                            };
                        } | {
                            past_year: {
                                [x: string]: never;
                            };
                        } | {
                            next_week: {
                                [x: string]: never;
                            };
                        } | {
                            next_month: {
                                [x: string]: never;
                            };
                        } | {
                            next_year: {
                                [x: string]: never;
                            };
                        };
                    } | {
                        people: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        files: {
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        };
                    };
                } | {
                    none: {
                        rich_text: {
                            equals: string;
                        } | {
                            does_not_equal: string;
                        } | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        } | {
                            starts_with: string;
                        } | {
                            ends_with: string;
                        } | ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        });
                    } | {
                        number: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: number;
                        } | {
                            does_not_equal: number;
                        } | {
                            greater_than: number;
                        } | {
                            less_than: number;
                        } | {
                            greater_than_or_equal_to: number;
                        } | {
                            less_than_or_equal_to: number;
                        };
                    } | {
                        checkbox: {
                            equals: boolean;
                        } | {
                            does_not_equal: boolean;
                        };
                    } | {
                        select: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: string;
                        } | {
                            does_not_equal: string;
                        };
                    } | {
                        multi_select: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        relation: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        date: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: string;
                        } | {
                            before: string;
                        } | {
                            after: string;
                        } | {
                            on_or_before: string;
                        } | {
                            on_or_after: string;
                        } | {
                            past_week: {
                                [x: string]: never;
                            };
                        } | {
                            past_month: {
                                [x: string]: never;
                            };
                        } | {
                            past_year: {
                                [x: string]: never;
                            };
                        } | {
                            next_week: {
                                [x: string]: never;
                            };
                        } | {
                            next_month: {
                                [x: string]: never;
                            };
                        } | {
                            next_year: {
                                [x: string]: never;
                            };
                        };
                    } | {
                        people: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        files: {
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        };
                    };
                } | {
                    every: {
                        rich_text: {
                            equals: string;
                        } | {
                            does_not_equal: string;
                        } | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        } | {
                            starts_with: string;
                        } | {
                            ends_with: string;
                        } | ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        });
                    } | {
                        number: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: number;
                        } | {
                            does_not_equal: number;
                        } | {
                            greater_than: number;
                        } | {
                            less_than: number;
                        } | {
                            greater_than_or_equal_to: number;
                        } | {
                            less_than_or_equal_to: number;
                        };
                    } | {
                        checkbox: {
                            equals: boolean;
                        } | {
                            does_not_equal: boolean;
                        };
                    } | {
                        select: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: string;
                        } | {
                            does_not_equal: string;
                        };
                    } | {
                        multi_select: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        relation: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        date: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: string;
                        } | {
                            before: string;
                        } | {
                            after: string;
                        } | {
                            on_or_before: string;
                        } | {
                            on_or_after: string;
                        } | {
                            past_week: {
                                [x: string]: never;
                            };
                        } | {
                            past_month: {
                                [x: string]: never;
                            };
                        } | {
                            past_year: {
                                [x: string]: never;
                            };
                        } | {
                            next_week: {
                                [x: string]: never;
                            };
                        } | {
                            next_month: {
                                [x: string]: never;
                            };
                        } | {
                            next_year: {
                                [x: string]: never;
                            };
                        };
                    } | {
                        people: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        files: {
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        };
                    };
                } | {
                    date: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: string;
                    } | {
                        before: string;
                    } | {
                        after: string;
                    } | {
                        on_or_before: string;
                    } | {
                        on_or_after: string;
                    } | {
                        past_week: {
                            [x: string]: never;
                        };
                    } | {
                        past_month: {
                            [x: string]: never;
                        };
                    } | {
                        past_year: {
                            [x: string]: never;
                        };
                    } | {
                        next_week: {
                            [x: string]: never;
                        };
                    } | {
                        next_month: {
                            [x: string]: never;
                        };
                    } | {
                        next_year: {
                            [x: string]: never;
                        };
                    };
                } | {
                    number: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: number;
                    } | {
                        does_not_equal: number;
                    } | {
                        greater_than: number;
                    } | {
                        less_than: number;
                    } | {
                        greater_than_or_equal_to: number;
                    } | {
                        less_than_or_equal_to: number;
                    };
                };
                property: string;
                type?: "rollup" | undefined;
            })[];
        } | {
            and: ({
                title: {
                    equals: string;
                } | {
                    does_not_equal: string;
                } | {
                    contains: string;
                } | {
                    does_not_contain: string;
                } | {
                    starts_with: string;
                } | {
                    ends_with: string;
                } | ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                });
                property: string;
                type?: "title" | undefined;
            } | {
                rich_text: {
                    equals: string;
                } | {
                    does_not_equal: string;
                } | {
                    contains: string;
                } | {
                    does_not_contain: string;
                } | {
                    starts_with: string;
                } | {
                    ends_with: string;
                } | ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                });
                property: string;
                type?: "rich_text" | undefined;
            } | {
                number: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    equals: number;
                } | {
                    does_not_equal: number;
                } | {
                    greater_than: number;
                } | {
                    less_than: number;
                } | {
                    greater_than_or_equal_to: number;
                } | {
                    less_than_or_equal_to: number;
                };
                property: string;
                type?: "number" | undefined;
            } | {
                checkbox: {
                    equals: boolean;
                } | {
                    does_not_equal: boolean;
                };
                property: string;
                type?: "checkbox" | undefined;
            } | {
                select: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    equals: string;
                } | {
                    does_not_equal: string;
                };
                property: string;
                type?: "select" | undefined;
            } | {
                multi_select: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    contains: string;
                } | {
                    does_not_contain: string;
                };
                property: string;
                type?: "multi_select" | undefined;
            } | {
                date: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    equals: string;
                } | {
                    before: string;
                } | {
                    after: string;
                } | {
                    on_or_before: string;
                } | {
                    on_or_after: string;
                } | {
                    past_week: {
                        [x: string]: never;
                    };
                } | {
                    past_month: {
                        [x: string]: never;
                    };
                } | {
                    past_year: {
                        [x: string]: never;
                    };
                } | {
                    next_week: {
                        [x: string]: never;
                    };
                } | {
                    next_month: {
                        [x: string]: never;
                    };
                } | {
                    next_year: {
                        [x: string]: never;
                    };
                };
                property: string;
                type?: "date" | undefined;
            } | {
                people: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    contains: string;
                } | {
                    does_not_contain: string;
                };
                property: string;
                type?: "people" | undefined;
            } | {
                files: {
                    is_empty: true;
                } | {
                    is_not_empty: true;
                };
                property: string;
                type?: "files" | undefined;
            } | {
                url: {
                    equals: string;
                } | {
                    does_not_equal: string;
                } | {
                    contains: string;
                } | {
                    does_not_contain: string;
                } | {
                    starts_with: string;
                } | {
                    ends_with: string;
                } | ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                });
                property: string;
                type?: "url" | undefined;
            } | {
                email: {
                    equals: string;
                } | {
                    does_not_equal: string;
                } | {
                    contains: string;
                } | {
                    does_not_contain: string;
                } | {
                    starts_with: string;
                } | {
                    ends_with: string;
                } | ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                });
                property: string;
                type?: "email" | undefined;
            } | {
                phone_number: {
                    equals: string;
                } | {
                    does_not_equal: string;
                } | {
                    contains: string;
                } | {
                    does_not_contain: string;
                } | {
                    starts_with: string;
                } | {
                    ends_with: string;
                } | ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                });
                property: string;
                type?: "phone_number" | undefined;
            } | {
                relation: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    contains: string;
                } | {
                    does_not_contain: string;
                };
                property: string;
                type?: "relation" | undefined;
            } | {
                created_by: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    contains: string;
                } | {
                    does_not_contain: string;
                };
                property: string;
                type?: "created_by" | undefined;
            } | {
                created_time: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    equals: string;
                } | {
                    before: string;
                } | {
                    after: string;
                } | {
                    on_or_before: string;
                } | {
                    on_or_after: string;
                } | {
                    past_week: {
                        [x: string]: never;
                    };
                } | {
                    past_month: {
                        [x: string]: never;
                    };
                } | {
                    past_year: {
                        [x: string]: never;
                    };
                } | {
                    next_week: {
                        [x: string]: never;
                    };
                } | {
                    next_month: {
                        [x: string]: never;
                    };
                } | {
                    next_year: {
                        [x: string]: never;
                    };
                };
                property: string;
                type?: "created_time" | undefined;
            } | {
                last_edited_by: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    contains: string;
                } | {
                    does_not_contain: string;
                };
                property: string;
                type?: "last_edited_by" | undefined;
            } | {
                last_edited_time: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    equals: string;
                } | {
                    before: string;
                } | {
                    after: string;
                } | {
                    on_or_before: string;
                } | {
                    on_or_after: string;
                } | {
                    past_week: {
                        [x: string]: never;
                    };
                } | {
                    past_month: {
                        [x: string]: never;
                    };
                } | {
                    past_year: {
                        [x: string]: never;
                    };
                } | {
                    next_week: {
                        [x: string]: never;
                    };
                } | {
                    next_month: {
                        [x: string]: never;
                    };
                } | {
                    next_year: {
                        [x: string]: never;
                    };
                };
                property: string;
                type?: "last_edited_time" | undefined;
            } | {
                formula: {
                    string: {
                        equals: string;
                    } | {
                        does_not_equal: string;
                    } | {
                        contains: string;
                    } | {
                        does_not_contain: string;
                    } | {
                        starts_with: string;
                    } | {
                        ends_with: string;
                    } | ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    });
                } | {
                    checkbox: {
                        equals: boolean;
                    } | {
                        does_not_equal: boolean;
                    };
                } | {
                    number: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: number;
                    } | {
                        does_not_equal: number;
                    } | {
                        greater_than: number;
                    } | {
                        less_than: number;
                    } | {
                        greater_than_or_equal_to: number;
                    } | {
                        less_than_or_equal_to: number;
                    };
                } | {
                    date: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: string;
                    } | {
                        before: string;
                    } | {
                        after: string;
                    } | {
                        on_or_before: string;
                    } | {
                        on_or_after: string;
                    } | {
                        past_week: {
                            [x: string]: never;
                        };
                    } | {
                        past_month: {
                            [x: string]: never;
                        };
                    } | {
                        past_year: {
                            [x: string]: never;
                        };
                    } | {
                        next_week: {
                            [x: string]: never;
                        };
                    } | {
                        next_month: {
                            [x: string]: never;
                        };
                    } | {
                        next_year: {
                            [x: string]: never;
                        };
                    };
                };
                property: string;
                type?: "formula" | undefined;
            } | {
                rollup: {
                    any: {
                        rich_text: {
                            equals: string;
                        } | {
                            does_not_equal: string;
                        } | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        } | {
                            starts_with: string;
                        } | {
                            ends_with: string;
                        } | ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        });
                    } | {
                        number: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: number;
                        } | {
                            does_not_equal: number;
                        } | {
                            greater_than: number;
                        } | {
                            less_than: number;
                        } | {
                            greater_than_or_equal_to: number;
                        } | {
                            less_than_or_equal_to: number;
                        };
                    } | {
                        checkbox: {
                            equals: boolean;
                        } | {
                            does_not_equal: boolean;
                        };
                    } | {
                        select: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: string;
                        } | {
                            does_not_equal: string;
                        };
                    } | {
                        multi_select: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        relation: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        date: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: string;
                        } | {
                            before: string;
                        } | {
                            after: string;
                        } | {
                            on_or_before: string;
                        } | {
                            on_or_after: string;
                        } | {
                            past_week: {
                                [x: string]: never;
                            };
                        } | {
                            past_month: {
                                [x: string]: never;
                            };
                        } | {
                            past_year: {
                                [x: string]: never;
                            };
                        } | {
                            next_week: {
                                [x: string]: never;
                            };
                        } | {
                            next_month: {
                                [x: string]: never;
                            };
                        } | {
                            next_year: {
                                [x: string]: never;
                            };
                        };
                    } | {
                        people: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        files: {
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        };
                    };
                } | {
                    none: {
                        rich_text: {
                            equals: string;
                        } | {
                            does_not_equal: string;
                        } | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        } | {
                            starts_with: string;
                        } | {
                            ends_with: string;
                        } | ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        });
                    } | {
                        number: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: number;
                        } | {
                            does_not_equal: number;
                        } | {
                            greater_than: number;
                        } | {
                            less_than: number;
                        } | {
                            greater_than_or_equal_to: number;
                        } | {
                            less_than_or_equal_to: number;
                        };
                    } | {
                        checkbox: {
                            equals: boolean;
                        } | {
                            does_not_equal: boolean;
                        };
                    } | {
                        select: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: string;
                        } | {
                            does_not_equal: string;
                        };
                    } | {
                        multi_select: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        relation: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        date: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: string;
                        } | {
                            before: string;
                        } | {
                            after: string;
                        } | {
                            on_or_before: string;
                        } | {
                            on_or_after: string;
                        } | {
                            past_week: {
                                [x: string]: never;
                            };
                        } | {
                            past_month: {
                                [x: string]: never;
                            };
                        } | {
                            past_year: {
                                [x: string]: never;
                            };
                        } | {
                            next_week: {
                                [x: string]: never;
                            };
                        } | {
                            next_month: {
                                [x: string]: never;
                            };
                        } | {
                            next_year: {
                                [x: string]: never;
                            };
                        };
                    } | {
                        people: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        files: {
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        };
                    };
                } | {
                    every: {
                        rich_text: {
                            equals: string;
                        } | {
                            does_not_equal: string;
                        } | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        } | {
                            starts_with: string;
                        } | {
                            ends_with: string;
                        } | ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        });
                    } | {
                        number: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: number;
                        } | {
                            does_not_equal: number;
                        } | {
                            greater_than: number;
                        } | {
                            less_than: number;
                        } | {
                            greater_than_or_equal_to: number;
                        } | {
                            less_than_or_equal_to: number;
                        };
                    } | {
                        checkbox: {
                            equals: boolean;
                        } | {
                            does_not_equal: boolean;
                        };
                    } | {
                        select: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: string;
                        } | {
                            does_not_equal: string;
                        };
                    } | {
                        multi_select: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        relation: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        date: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: string;
                        } | {
                            before: string;
                        } | {
                            after: string;
                        } | {
                            on_or_before: string;
                        } | {
                            on_or_after: string;
                        } | {
                            past_week: {
                                [x: string]: never;
                            };
                        } | {
                            past_month: {
                                [x: string]: never;
                            };
                        } | {
                            past_year: {
                                [x: string]: never;
                            };
                        } | {
                            next_week: {
                                [x: string]: never;
                            };
                        } | {
                            next_month: {
                                [x: string]: never;
                            };
                        } | {
                            next_year: {
                                [x: string]: never;
                            };
                        };
                    } | {
                        people: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        files: {
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        };
                    };
                } | {
                    date: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: string;
                    } | {
                        before: string;
                    } | {
                        after: string;
                    } | {
                        on_or_before: string;
                    } | {
                        on_or_after: string;
                    } | {
                        past_week: {
                            [x: string]: never;
                        };
                    } | {
                        past_month: {
                            [x: string]: never;
                        };
                    } | {
                        past_year: {
                            [x: string]: never;
                        };
                    } | {
                        next_week: {
                            [x: string]: never;
                        };
                    } | {
                        next_month: {
                            [x: string]: never;
                        };
                    } | {
                        next_year: {
                            [x: string]: never;
                        };
                    };
                } | {
                    number: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: number;
                    } | {
                        does_not_equal: number;
                    } | {
                        greater_than: number;
                    } | {
                        less_than: number;
                    } | {
                        greater_than_or_equal_to: number;
                    } | {
                        less_than_or_equal_to: number;
                    };
                };
                property: string;
                type?: "rollup" | undefined;
            })[];
        })[];
    };
    /**
     * Build an `or` [[CompoundFilter]] from multiple arguments, or otherwise
     * return the only filter.
     *
     * Note that the Notion API limits filter depth, but this function does not.
     */
    readonly or: (...filters: Array<Filter | undefined | false>) => Filter | undefined;
    /**
     * @returns True if `filter` is an `or` [[CompoundFilter]].
     */
    readonly isOr: (filter: Filter) => filter is {
        or: (({
            title: {
                equals: string;
            } | {
                does_not_equal: string;
            } | {
                contains: string;
            } | {
                does_not_contain: string;
            } | {
                starts_with: string;
            } | {
                ends_with: string;
            } | ({
                is_empty: true;
            } | {
                is_not_empty: true;
            });
            property: string;
            type?: "title" | undefined;
        } | {
            rich_text: {
                equals: string;
            } | {
                does_not_equal: string;
            } | {
                contains: string;
            } | {
                does_not_contain: string;
            } | {
                starts_with: string;
            } | {
                ends_with: string;
            } | ({
                is_empty: true;
            } | {
                is_not_empty: true;
            });
            property: string;
            type?: "rich_text" | undefined;
        } | {
            number: ({
                is_empty: true;
            } | {
                is_not_empty: true;
            }) | {
                equals: number;
            } | {
                does_not_equal: number;
            } | {
                greater_than: number;
            } | {
                less_than: number;
            } | {
                greater_than_or_equal_to: number;
            } | {
                less_than_or_equal_to: number;
            };
            property: string;
            type?: "number" | undefined;
        } | {
            checkbox: {
                equals: boolean;
            } | {
                does_not_equal: boolean;
            };
            property: string;
            type?: "checkbox" | undefined;
        } | {
            select: ({
                is_empty: true;
            } | {
                is_not_empty: true;
            }) | {
                equals: string;
            } | {
                does_not_equal: string;
            };
            property: string;
            type?: "select" | undefined;
        } | {
            multi_select: ({
                is_empty: true;
            } | {
                is_not_empty: true;
            }) | {
                contains: string;
            } | {
                does_not_contain: string;
            };
            property: string;
            type?: "multi_select" | undefined;
        } | {
            date: ({
                is_empty: true;
            } | {
                is_not_empty: true;
            }) | {
                equals: string;
            } | {
                before: string;
            } | {
                after: string;
            } | {
                on_or_before: string;
            } | {
                on_or_after: string;
            } | {
                past_week: {
                    [x: string]: never;
                };
            } | {
                past_month: {
                    [x: string]: never;
                };
            } | {
                past_year: {
                    [x: string]: never;
                };
            } | {
                next_week: {
                    [x: string]: never;
                };
            } | {
                next_month: {
                    [x: string]: never;
                };
            } | {
                next_year: {
                    [x: string]: never;
                };
            };
            property: string;
            type?: "date" | undefined;
        } | {
            people: ({
                is_empty: true;
            } | {
                is_not_empty: true;
            }) | {
                contains: string;
            } | {
                does_not_contain: string;
            };
            property: string;
            type?: "people" | undefined;
        } | {
            files: {
                is_empty: true;
            } | {
                is_not_empty: true;
            };
            property: string;
            type?: "files" | undefined;
        } | {
            url: {
                equals: string;
            } | {
                does_not_equal: string;
            } | {
                contains: string;
            } | {
                does_not_contain: string;
            } | {
                starts_with: string;
            } | {
                ends_with: string;
            } | ({
                is_empty: true;
            } | {
                is_not_empty: true;
            });
            property: string;
            type?: "url" | undefined;
        } | {
            email: {
                equals: string;
            } | {
                does_not_equal: string;
            } | {
                contains: string;
            } | {
                does_not_contain: string;
            } | {
                starts_with: string;
            } | {
                ends_with: string;
            } | ({
                is_empty: true;
            } | {
                is_not_empty: true;
            });
            property: string;
            type?: "email" | undefined;
        } | {
            phone_number: {
                equals: string;
            } | {
                does_not_equal: string;
            } | {
                contains: string;
            } | {
                does_not_contain: string;
            } | {
                starts_with: string;
            } | {
                ends_with: string;
            } | ({
                is_empty: true;
            } | {
                is_not_empty: true;
            });
            property: string;
            type?: "phone_number" | undefined;
        } | {
            relation: ({
                is_empty: true;
            } | {
                is_not_empty: true;
            }) | {
                contains: string;
            } | {
                does_not_contain: string;
            };
            property: string;
            type?: "relation" | undefined;
        } | {
            created_by: ({
                is_empty: true;
            } | {
                is_not_empty: true;
            }) | {
                contains: string;
            } | {
                does_not_contain: string;
            };
            property: string;
            type?: "created_by" | undefined;
        } | {
            created_time: ({
                is_empty: true;
            } | {
                is_not_empty: true;
            }) | {
                equals: string;
            } | {
                before: string;
            } | {
                after: string;
            } | {
                on_or_before: string;
            } | {
                on_or_after: string;
            } | {
                past_week: {
                    [x: string]: never;
                };
            } | {
                past_month: {
                    [x: string]: never;
                };
            } | {
                past_year: {
                    [x: string]: never;
                };
            } | {
                next_week: {
                    [x: string]: never;
                };
            } | {
                next_month: {
                    [x: string]: never;
                };
            } | {
                next_year: {
                    [x: string]: never;
                };
            };
            property: string;
            type?: "created_time" | undefined;
        } | {
            last_edited_by: ({
                is_empty: true;
            } | {
                is_not_empty: true;
            }) | {
                contains: string;
            } | {
                does_not_contain: string;
            };
            property: string;
            type?: "last_edited_by" | undefined;
        } | {
            last_edited_time: ({
                is_empty: true;
            } | {
                is_not_empty: true;
            }) | {
                equals: string;
            } | {
                before: string;
            } | {
                after: string;
            } | {
                on_or_before: string;
            } | {
                on_or_after: string;
            } | {
                past_week: {
                    [x: string]: never;
                };
            } | {
                past_month: {
                    [x: string]: never;
                };
            } | {
                past_year: {
                    [x: string]: never;
                };
            } | {
                next_week: {
                    [x: string]: never;
                };
            } | {
                next_month: {
                    [x: string]: never;
                };
            } | {
                next_year: {
                    [x: string]: never;
                };
            };
            property: string;
            type?: "last_edited_time" | undefined;
        } | {
            formula: {
                string: {
                    equals: string;
                } | {
                    does_not_equal: string;
                } | {
                    contains: string;
                } | {
                    does_not_contain: string;
                } | {
                    starts_with: string;
                } | {
                    ends_with: string;
                } | ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                });
            } | {
                checkbox: {
                    equals: boolean;
                } | {
                    does_not_equal: boolean;
                };
            } | {
                number: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    equals: number;
                } | {
                    does_not_equal: number;
                } | {
                    greater_than: number;
                } | {
                    less_than: number;
                } | {
                    greater_than_or_equal_to: number;
                } | {
                    less_than_or_equal_to: number;
                };
            } | {
                date: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    equals: string;
                } | {
                    before: string;
                } | {
                    after: string;
                } | {
                    on_or_before: string;
                } | {
                    on_or_after: string;
                } | {
                    past_week: {
                        [x: string]: never;
                    };
                } | {
                    past_month: {
                        [x: string]: never;
                    };
                } | {
                    past_year: {
                        [x: string]: never;
                    };
                } | {
                    next_week: {
                        [x: string]: never;
                    };
                } | {
                    next_month: {
                        [x: string]: never;
                    };
                } | {
                    next_year: {
                        [x: string]: never;
                    };
                };
            };
            property: string;
            type?: "formula" | undefined;
        } | {
            rollup: {
                any: {
                    rich_text: {
                        equals: string;
                    } | {
                        does_not_equal: string;
                    } | {
                        contains: string;
                    } | {
                        does_not_contain: string;
                    } | {
                        starts_with: string;
                    } | {
                        ends_with: string;
                    } | ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    });
                } | {
                    number: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: number;
                    } | {
                        does_not_equal: number;
                    } | {
                        greater_than: number;
                    } | {
                        less_than: number;
                    } | {
                        greater_than_or_equal_to: number;
                    } | {
                        less_than_or_equal_to: number;
                    };
                } | {
                    checkbox: {
                        equals: boolean;
                    } | {
                        does_not_equal: boolean;
                    };
                } | {
                    select: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: string;
                    } | {
                        does_not_equal: string;
                    };
                } | {
                    multi_select: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        contains: string;
                    } | {
                        does_not_contain: string;
                    };
                } | {
                    relation: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        contains: string;
                    } | {
                        does_not_contain: string;
                    };
                } | {
                    date: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: string;
                    } | {
                        before: string;
                    } | {
                        after: string;
                    } | {
                        on_or_before: string;
                    } | {
                        on_or_after: string;
                    } | {
                        past_week: {
                            [x: string]: never;
                        };
                    } | {
                        past_month: {
                            [x: string]: never;
                        };
                    } | {
                        past_year: {
                            [x: string]: never;
                        };
                    } | {
                        next_week: {
                            [x: string]: never;
                        };
                    } | {
                        next_month: {
                            [x: string]: never;
                        };
                    } | {
                        next_year: {
                            [x: string]: never;
                        };
                    };
                } | {
                    people: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        contains: string;
                    } | {
                        does_not_contain: string;
                    };
                } | {
                    files: {
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    };
                };
            } | {
                none: {
                    rich_text: {
                        equals: string;
                    } | {
                        does_not_equal: string;
                    } | {
                        contains: string;
                    } | {
                        does_not_contain: string;
                    } | {
                        starts_with: string;
                    } | {
                        ends_with: string;
                    } | ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    });
                } | {
                    number: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: number;
                    } | {
                        does_not_equal: number;
                    } | {
                        greater_than: number;
                    } | {
                        less_than: number;
                    } | {
                        greater_than_or_equal_to: number;
                    } | {
                        less_than_or_equal_to: number;
                    };
                } | {
                    checkbox: {
                        equals: boolean;
                    } | {
                        does_not_equal: boolean;
                    };
                } | {
                    select: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: string;
                    } | {
                        does_not_equal: string;
                    };
                } | {
                    multi_select: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        contains: string;
                    } | {
                        does_not_contain: string;
                    };
                } | {
                    relation: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        contains: string;
                    } | {
                        does_not_contain: string;
                    };
                } | {
                    date: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: string;
                    } | {
                        before: string;
                    } | {
                        after: string;
                    } | {
                        on_or_before: string;
                    } | {
                        on_or_after: string;
                    } | {
                        past_week: {
                            [x: string]: never;
                        };
                    } | {
                        past_month: {
                            [x: string]: never;
                        };
                    } | {
                        past_year: {
                            [x: string]: never;
                        };
                    } | {
                        next_week: {
                            [x: string]: never;
                        };
                    } | {
                        next_month: {
                            [x: string]: never;
                        };
                    } | {
                        next_year: {
                            [x: string]: never;
                        };
                    };
                } | {
                    people: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        contains: string;
                    } | {
                        does_not_contain: string;
                    };
                } | {
                    files: {
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    };
                };
            } | {
                every: {
                    rich_text: {
                        equals: string;
                    } | {
                        does_not_equal: string;
                    } | {
                        contains: string;
                    } | {
                        does_not_contain: string;
                    } | {
                        starts_with: string;
                    } | {
                        ends_with: string;
                    } | ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    });
                } | {
                    number: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: number;
                    } | {
                        does_not_equal: number;
                    } | {
                        greater_than: number;
                    } | {
                        less_than: number;
                    } | {
                        greater_than_or_equal_to: number;
                    } | {
                        less_than_or_equal_to: number;
                    };
                } | {
                    checkbox: {
                        equals: boolean;
                    } | {
                        does_not_equal: boolean;
                    };
                } | {
                    select: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: string;
                    } | {
                        does_not_equal: string;
                    };
                } | {
                    multi_select: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        contains: string;
                    } | {
                        does_not_contain: string;
                    };
                } | {
                    relation: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        contains: string;
                    } | {
                        does_not_contain: string;
                    };
                } | {
                    date: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: string;
                    } | {
                        before: string;
                    } | {
                        after: string;
                    } | {
                        on_or_before: string;
                    } | {
                        on_or_after: string;
                    } | {
                        past_week: {
                            [x: string]: never;
                        };
                    } | {
                        past_month: {
                            [x: string]: never;
                        };
                    } | {
                        past_year: {
                            [x: string]: never;
                        };
                    } | {
                        next_week: {
                            [x: string]: never;
                        };
                    } | {
                        next_month: {
                            [x: string]: never;
                        };
                    } | {
                        next_year: {
                            [x: string]: never;
                        };
                    };
                } | {
                    people: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        contains: string;
                    } | {
                        does_not_contain: string;
                    };
                } | {
                    files: {
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    };
                };
            } | {
                date: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    equals: string;
                } | {
                    before: string;
                } | {
                    after: string;
                } | {
                    on_or_before: string;
                } | {
                    on_or_after: string;
                } | {
                    past_week: {
                        [x: string]: never;
                    };
                } | {
                    past_month: {
                        [x: string]: never;
                    };
                } | {
                    past_year: {
                        [x: string]: never;
                    };
                } | {
                    next_week: {
                        [x: string]: never;
                    };
                } | {
                    next_month: {
                        [x: string]: never;
                    };
                } | {
                    next_year: {
                        [x: string]: never;
                    };
                };
            } | {
                number: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    equals: number;
                } | {
                    does_not_equal: number;
                } | {
                    greater_than: number;
                } | {
                    less_than: number;
                } | {
                    greater_than_or_equal_to: number;
                } | {
                    less_than_or_equal_to: number;
                };
            };
            property: string;
            type?: "rollup" | undefined;
        }) | {
            created_time: ({
                is_empty: true;
            } | {
                is_not_empty: true;
            }) | {
                equals: string;
            } | {
                before: string;
            } | {
                after: string;
            } | {
                on_or_before: string;
            } | {
                on_or_after: string;
            } | {
                past_week: {
                    [x: string]: never;
                };
            } | {
                past_month: {
                    [x: string]: never;
                };
            } | {
                past_year: {
                    [x: string]: never;
                };
            } | {
                next_week: {
                    [x: string]: never;
                };
            } | {
                next_month: {
                    [x: string]: never;
                };
            } | {
                next_year: {
                    [x: string]: never;
                };
            };
            timestamp: "created_time";
            type?: "created_time" | undefined;
        } | {
            last_edited_time: ({
                is_empty: true;
            } | {
                is_not_empty: true;
            }) | {
                equals: string;
            } | {
                before: string;
            } | {
                after: string;
            } | {
                on_or_before: string;
            } | {
                on_or_after: string;
            } | {
                past_week: {
                    [x: string]: never;
                };
            } | {
                past_month: {
                    [x: string]: never;
                };
            } | {
                past_year: {
                    [x: string]: never;
                };
            } | {
                next_week: {
                    [x: string]: never;
                };
            } | {
                next_month: {
                    [x: string]: never;
                };
            } | {
                next_year: {
                    [x: string]: never;
                };
            };
            timestamp: "last_edited_time";
            type?: "last_edited_time" | undefined;
        } | {
            or: ({
                title: {
                    equals: string;
                } | {
                    does_not_equal: string;
                } | {
                    contains: string;
                } | {
                    does_not_contain: string;
                } | {
                    starts_with: string;
                } | {
                    ends_with: string;
                } | ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                });
                property: string;
                type?: "title" | undefined;
            } | {
                rich_text: {
                    equals: string;
                } | {
                    does_not_equal: string;
                } | {
                    contains: string;
                } | {
                    does_not_contain: string;
                } | {
                    starts_with: string;
                } | {
                    ends_with: string;
                } | ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                });
                property: string;
                type?: "rich_text" | undefined;
            } | {
                number: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    equals: number;
                } | {
                    does_not_equal: number;
                } | {
                    greater_than: number;
                } | {
                    less_than: number;
                } | {
                    greater_than_or_equal_to: number;
                } | {
                    less_than_or_equal_to: number;
                };
                property: string;
                type?: "number" | undefined;
            } | {
                checkbox: {
                    equals: boolean;
                } | {
                    does_not_equal: boolean;
                };
                property: string;
                type?: "checkbox" | undefined;
            } | {
                select: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    equals: string;
                } | {
                    does_not_equal: string;
                };
                property: string;
                type?: "select" | undefined;
            } | {
                multi_select: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    contains: string;
                } | {
                    does_not_contain: string;
                };
                property: string;
                type?: "multi_select" | undefined;
            } | {
                date: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    equals: string;
                } | {
                    before: string;
                } | {
                    after: string;
                } | {
                    on_or_before: string;
                } | {
                    on_or_after: string;
                } | {
                    past_week: {
                        [x: string]: never;
                    };
                } | {
                    past_month: {
                        [x: string]: never;
                    };
                } | {
                    past_year: {
                        [x: string]: never;
                    };
                } | {
                    next_week: {
                        [x: string]: never;
                    };
                } | {
                    next_month: {
                        [x: string]: never;
                    };
                } | {
                    next_year: {
                        [x: string]: never;
                    };
                };
                property: string;
                type?: "date" | undefined;
            } | {
                people: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    contains: string;
                } | {
                    does_not_contain: string;
                };
                property: string;
                type?: "people" | undefined;
            } | {
                files: {
                    is_empty: true;
                } | {
                    is_not_empty: true;
                };
                property: string;
                type?: "files" | undefined;
            } | {
                url: {
                    equals: string;
                } | {
                    does_not_equal: string;
                } | {
                    contains: string;
                } | {
                    does_not_contain: string;
                } | {
                    starts_with: string;
                } | {
                    ends_with: string;
                } | ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                });
                property: string;
                type?: "url" | undefined;
            } | {
                email: {
                    equals: string;
                } | {
                    does_not_equal: string;
                } | {
                    contains: string;
                } | {
                    does_not_contain: string;
                } | {
                    starts_with: string;
                } | {
                    ends_with: string;
                } | ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                });
                property: string;
                type?: "email" | undefined;
            } | {
                phone_number: {
                    equals: string;
                } | {
                    does_not_equal: string;
                } | {
                    contains: string;
                } | {
                    does_not_contain: string;
                } | {
                    starts_with: string;
                } | {
                    ends_with: string;
                } | ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                });
                property: string;
                type?: "phone_number" | undefined;
            } | {
                relation: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    contains: string;
                } | {
                    does_not_contain: string;
                };
                property: string;
                type?: "relation" | undefined;
            } | {
                created_by: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    contains: string;
                } | {
                    does_not_contain: string;
                };
                property: string;
                type?: "created_by" | undefined;
            } | {
                created_time: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    equals: string;
                } | {
                    before: string;
                } | {
                    after: string;
                } | {
                    on_or_before: string;
                } | {
                    on_or_after: string;
                } | {
                    past_week: {
                        [x: string]: never;
                    };
                } | {
                    past_month: {
                        [x: string]: never;
                    };
                } | {
                    past_year: {
                        [x: string]: never;
                    };
                } | {
                    next_week: {
                        [x: string]: never;
                    };
                } | {
                    next_month: {
                        [x: string]: never;
                    };
                } | {
                    next_year: {
                        [x: string]: never;
                    };
                };
                property: string;
                type?: "created_time" | undefined;
            } | {
                last_edited_by: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    contains: string;
                } | {
                    does_not_contain: string;
                };
                property: string;
                type?: "last_edited_by" | undefined;
            } | {
                last_edited_time: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    equals: string;
                } | {
                    before: string;
                } | {
                    after: string;
                } | {
                    on_or_before: string;
                } | {
                    on_or_after: string;
                } | {
                    past_week: {
                        [x: string]: never;
                    };
                } | {
                    past_month: {
                        [x: string]: never;
                    };
                } | {
                    past_year: {
                        [x: string]: never;
                    };
                } | {
                    next_week: {
                        [x: string]: never;
                    };
                } | {
                    next_month: {
                        [x: string]: never;
                    };
                } | {
                    next_year: {
                        [x: string]: never;
                    };
                };
                property: string;
                type?: "last_edited_time" | undefined;
            } | {
                formula: {
                    string: {
                        equals: string;
                    } | {
                        does_not_equal: string;
                    } | {
                        contains: string;
                    } | {
                        does_not_contain: string;
                    } | {
                        starts_with: string;
                    } | {
                        ends_with: string;
                    } | ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    });
                } | {
                    checkbox: {
                        equals: boolean;
                    } | {
                        does_not_equal: boolean;
                    };
                } | {
                    number: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: number;
                    } | {
                        does_not_equal: number;
                    } | {
                        greater_than: number;
                    } | {
                        less_than: number;
                    } | {
                        greater_than_or_equal_to: number;
                    } | {
                        less_than_or_equal_to: number;
                    };
                } | {
                    date: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: string;
                    } | {
                        before: string;
                    } | {
                        after: string;
                    } | {
                        on_or_before: string;
                    } | {
                        on_or_after: string;
                    } | {
                        past_week: {
                            [x: string]: never;
                        };
                    } | {
                        past_month: {
                            [x: string]: never;
                        };
                    } | {
                        past_year: {
                            [x: string]: never;
                        };
                    } | {
                        next_week: {
                            [x: string]: never;
                        };
                    } | {
                        next_month: {
                            [x: string]: never;
                        };
                    } | {
                        next_year: {
                            [x: string]: never;
                        };
                    };
                };
                property: string;
                type?: "formula" | undefined;
            } | {
                rollup: {
                    any: {
                        rich_text: {
                            equals: string;
                        } | {
                            does_not_equal: string;
                        } | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        } | {
                            starts_with: string;
                        } | {
                            ends_with: string;
                        } | ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        });
                    } | {
                        number: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: number;
                        } | {
                            does_not_equal: number;
                        } | {
                            greater_than: number;
                        } | {
                            less_than: number;
                        } | {
                            greater_than_or_equal_to: number;
                        } | {
                            less_than_or_equal_to: number;
                        };
                    } | {
                        checkbox: {
                            equals: boolean;
                        } | {
                            does_not_equal: boolean;
                        };
                    } | {
                        select: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: string;
                        } | {
                            does_not_equal: string;
                        };
                    } | {
                        multi_select: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        relation: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        date: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: string;
                        } | {
                            before: string;
                        } | {
                            after: string;
                        } | {
                            on_or_before: string;
                        } | {
                            on_or_after: string;
                        } | {
                            past_week: {
                                [x: string]: never;
                            };
                        } | {
                            past_month: {
                                [x: string]: never;
                            };
                        } | {
                            past_year: {
                                [x: string]: never;
                            };
                        } | {
                            next_week: {
                                [x: string]: never;
                            };
                        } | {
                            next_month: {
                                [x: string]: never;
                            };
                        } | {
                            next_year: {
                                [x: string]: never;
                            };
                        };
                    } | {
                        people: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        files: {
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        };
                    };
                } | {
                    none: {
                        rich_text: {
                            equals: string;
                        } | {
                            does_not_equal: string;
                        } | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        } | {
                            starts_with: string;
                        } | {
                            ends_with: string;
                        } | ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        });
                    } | {
                        number: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: number;
                        } | {
                            does_not_equal: number;
                        } | {
                            greater_than: number;
                        } | {
                            less_than: number;
                        } | {
                            greater_than_or_equal_to: number;
                        } | {
                            less_than_or_equal_to: number;
                        };
                    } | {
                        checkbox: {
                            equals: boolean;
                        } | {
                            does_not_equal: boolean;
                        };
                    } | {
                        select: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: string;
                        } | {
                            does_not_equal: string;
                        };
                    } | {
                        multi_select: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        relation: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        date: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: string;
                        } | {
                            before: string;
                        } | {
                            after: string;
                        } | {
                            on_or_before: string;
                        } | {
                            on_or_after: string;
                        } | {
                            past_week: {
                                [x: string]: never;
                            };
                        } | {
                            past_month: {
                                [x: string]: never;
                            };
                        } | {
                            past_year: {
                                [x: string]: never;
                            };
                        } | {
                            next_week: {
                                [x: string]: never;
                            };
                        } | {
                            next_month: {
                                [x: string]: never;
                            };
                        } | {
                            next_year: {
                                [x: string]: never;
                            };
                        };
                    } | {
                        people: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        files: {
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        };
                    };
                } | {
                    every: {
                        rich_text: {
                            equals: string;
                        } | {
                            does_not_equal: string;
                        } | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        } | {
                            starts_with: string;
                        } | {
                            ends_with: string;
                        } | ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        });
                    } | {
                        number: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: number;
                        } | {
                            does_not_equal: number;
                        } | {
                            greater_than: number;
                        } | {
                            less_than: number;
                        } | {
                            greater_than_or_equal_to: number;
                        } | {
                            less_than_or_equal_to: number;
                        };
                    } | {
                        checkbox: {
                            equals: boolean;
                        } | {
                            does_not_equal: boolean;
                        };
                    } | {
                        select: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: string;
                        } | {
                            does_not_equal: string;
                        };
                    } | {
                        multi_select: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        relation: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        date: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: string;
                        } | {
                            before: string;
                        } | {
                            after: string;
                        } | {
                            on_or_before: string;
                        } | {
                            on_or_after: string;
                        } | {
                            past_week: {
                                [x: string]: never;
                            };
                        } | {
                            past_month: {
                                [x: string]: never;
                            };
                        } | {
                            past_year: {
                                [x: string]: never;
                            };
                        } | {
                            next_week: {
                                [x: string]: never;
                            };
                        } | {
                            next_month: {
                                [x: string]: never;
                            };
                        } | {
                            next_year: {
                                [x: string]: never;
                            };
                        };
                    } | {
                        people: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        files: {
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        };
                    };
                } | {
                    date: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: string;
                    } | {
                        before: string;
                    } | {
                        after: string;
                    } | {
                        on_or_before: string;
                    } | {
                        on_or_after: string;
                    } | {
                        past_week: {
                            [x: string]: never;
                        };
                    } | {
                        past_month: {
                            [x: string]: never;
                        };
                    } | {
                        past_year: {
                            [x: string]: never;
                        };
                    } | {
                        next_week: {
                            [x: string]: never;
                        };
                    } | {
                        next_month: {
                            [x: string]: never;
                        };
                    } | {
                        next_year: {
                            [x: string]: never;
                        };
                    };
                } | {
                    number: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: number;
                    } | {
                        does_not_equal: number;
                    } | {
                        greater_than: number;
                    } | {
                        less_than: number;
                    } | {
                        greater_than_or_equal_to: number;
                    } | {
                        less_than_or_equal_to: number;
                    };
                };
                property: string;
                type?: "rollup" | undefined;
            })[];
        } | {
            and: ({
                title: {
                    equals: string;
                } | {
                    does_not_equal: string;
                } | {
                    contains: string;
                } | {
                    does_not_contain: string;
                } | {
                    starts_with: string;
                } | {
                    ends_with: string;
                } | ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                });
                property: string;
                type?: "title" | undefined;
            } | {
                rich_text: {
                    equals: string;
                } | {
                    does_not_equal: string;
                } | {
                    contains: string;
                } | {
                    does_not_contain: string;
                } | {
                    starts_with: string;
                } | {
                    ends_with: string;
                } | ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                });
                property: string;
                type?: "rich_text" | undefined;
            } | {
                number: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    equals: number;
                } | {
                    does_not_equal: number;
                } | {
                    greater_than: number;
                } | {
                    less_than: number;
                } | {
                    greater_than_or_equal_to: number;
                } | {
                    less_than_or_equal_to: number;
                };
                property: string;
                type?: "number" | undefined;
            } | {
                checkbox: {
                    equals: boolean;
                } | {
                    does_not_equal: boolean;
                };
                property: string;
                type?: "checkbox" | undefined;
            } | {
                select: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    equals: string;
                } | {
                    does_not_equal: string;
                };
                property: string;
                type?: "select" | undefined;
            } | {
                multi_select: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    contains: string;
                } | {
                    does_not_contain: string;
                };
                property: string;
                type?: "multi_select" | undefined;
            } | {
                date: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    equals: string;
                } | {
                    before: string;
                } | {
                    after: string;
                } | {
                    on_or_before: string;
                } | {
                    on_or_after: string;
                } | {
                    past_week: {
                        [x: string]: never;
                    };
                } | {
                    past_month: {
                        [x: string]: never;
                    };
                } | {
                    past_year: {
                        [x: string]: never;
                    };
                } | {
                    next_week: {
                        [x: string]: never;
                    };
                } | {
                    next_month: {
                        [x: string]: never;
                    };
                } | {
                    next_year: {
                        [x: string]: never;
                    };
                };
                property: string;
                type?: "date" | undefined;
            } | {
                people: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    contains: string;
                } | {
                    does_not_contain: string;
                };
                property: string;
                type?: "people" | undefined;
            } | {
                files: {
                    is_empty: true;
                } | {
                    is_not_empty: true;
                };
                property: string;
                type?: "files" | undefined;
            } | {
                url: {
                    equals: string;
                } | {
                    does_not_equal: string;
                } | {
                    contains: string;
                } | {
                    does_not_contain: string;
                } | {
                    starts_with: string;
                } | {
                    ends_with: string;
                } | ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                });
                property: string;
                type?: "url" | undefined;
            } | {
                email: {
                    equals: string;
                } | {
                    does_not_equal: string;
                } | {
                    contains: string;
                } | {
                    does_not_contain: string;
                } | {
                    starts_with: string;
                } | {
                    ends_with: string;
                } | ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                });
                property: string;
                type?: "email" | undefined;
            } | {
                phone_number: {
                    equals: string;
                } | {
                    does_not_equal: string;
                } | {
                    contains: string;
                } | {
                    does_not_contain: string;
                } | {
                    starts_with: string;
                } | {
                    ends_with: string;
                } | ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                });
                property: string;
                type?: "phone_number" | undefined;
            } | {
                relation: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    contains: string;
                } | {
                    does_not_contain: string;
                };
                property: string;
                type?: "relation" | undefined;
            } | {
                created_by: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    contains: string;
                } | {
                    does_not_contain: string;
                };
                property: string;
                type?: "created_by" | undefined;
            } | {
                created_time: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    equals: string;
                } | {
                    before: string;
                } | {
                    after: string;
                } | {
                    on_or_before: string;
                } | {
                    on_or_after: string;
                } | {
                    past_week: {
                        [x: string]: never;
                    };
                } | {
                    past_month: {
                        [x: string]: never;
                    };
                } | {
                    past_year: {
                        [x: string]: never;
                    };
                } | {
                    next_week: {
                        [x: string]: never;
                    };
                } | {
                    next_month: {
                        [x: string]: never;
                    };
                } | {
                    next_year: {
                        [x: string]: never;
                    };
                };
                property: string;
                type?: "created_time" | undefined;
            } | {
                last_edited_by: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    contains: string;
                } | {
                    does_not_contain: string;
                };
                property: string;
                type?: "last_edited_by" | undefined;
            } | {
                last_edited_time: ({
                    is_empty: true;
                } | {
                    is_not_empty: true;
                }) | {
                    equals: string;
                } | {
                    before: string;
                } | {
                    after: string;
                } | {
                    on_or_before: string;
                } | {
                    on_or_after: string;
                } | {
                    past_week: {
                        [x: string]: never;
                    };
                } | {
                    past_month: {
                        [x: string]: never;
                    };
                } | {
                    past_year: {
                        [x: string]: never;
                    };
                } | {
                    next_week: {
                        [x: string]: never;
                    };
                } | {
                    next_month: {
                        [x: string]: never;
                    };
                } | {
                    next_year: {
                        [x: string]: never;
                    };
                };
                property: string;
                type?: "last_edited_time" | undefined;
            } | {
                formula: {
                    string: {
                        equals: string;
                    } | {
                        does_not_equal: string;
                    } | {
                        contains: string;
                    } | {
                        does_not_contain: string;
                    } | {
                        starts_with: string;
                    } | {
                        ends_with: string;
                    } | ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    });
                } | {
                    checkbox: {
                        equals: boolean;
                    } | {
                        does_not_equal: boolean;
                    };
                } | {
                    number: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: number;
                    } | {
                        does_not_equal: number;
                    } | {
                        greater_than: number;
                    } | {
                        less_than: number;
                    } | {
                        greater_than_or_equal_to: number;
                    } | {
                        less_than_or_equal_to: number;
                    };
                } | {
                    date: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: string;
                    } | {
                        before: string;
                    } | {
                        after: string;
                    } | {
                        on_or_before: string;
                    } | {
                        on_or_after: string;
                    } | {
                        past_week: {
                            [x: string]: never;
                        };
                    } | {
                        past_month: {
                            [x: string]: never;
                        };
                    } | {
                        past_year: {
                            [x: string]: never;
                        };
                    } | {
                        next_week: {
                            [x: string]: never;
                        };
                    } | {
                        next_month: {
                            [x: string]: never;
                        };
                    } | {
                        next_year: {
                            [x: string]: never;
                        };
                    };
                };
                property: string;
                type?: "formula" | undefined;
            } | {
                rollup: {
                    any: {
                        rich_text: {
                            equals: string;
                        } | {
                            does_not_equal: string;
                        } | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        } | {
                            starts_with: string;
                        } | {
                            ends_with: string;
                        } | ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        });
                    } | {
                        number: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: number;
                        } | {
                            does_not_equal: number;
                        } | {
                            greater_than: number;
                        } | {
                            less_than: number;
                        } | {
                            greater_than_or_equal_to: number;
                        } | {
                            less_than_or_equal_to: number;
                        };
                    } | {
                        checkbox: {
                            equals: boolean;
                        } | {
                            does_not_equal: boolean;
                        };
                    } | {
                        select: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: string;
                        } | {
                            does_not_equal: string;
                        };
                    } | {
                        multi_select: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        relation: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        date: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: string;
                        } | {
                            before: string;
                        } | {
                            after: string;
                        } | {
                            on_or_before: string;
                        } | {
                            on_or_after: string;
                        } | {
                            past_week: {
                                [x: string]: never;
                            };
                        } | {
                            past_month: {
                                [x: string]: never;
                            };
                        } | {
                            past_year: {
                                [x: string]: never;
                            };
                        } | {
                            next_week: {
                                [x: string]: never;
                            };
                        } | {
                            next_month: {
                                [x: string]: never;
                            };
                        } | {
                            next_year: {
                                [x: string]: never;
                            };
                        };
                    } | {
                        people: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        files: {
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        };
                    };
                } | {
                    none: {
                        rich_text: {
                            equals: string;
                        } | {
                            does_not_equal: string;
                        } | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        } | {
                            starts_with: string;
                        } | {
                            ends_with: string;
                        } | ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        });
                    } | {
                        number: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: number;
                        } | {
                            does_not_equal: number;
                        } | {
                            greater_than: number;
                        } | {
                            less_than: number;
                        } | {
                            greater_than_or_equal_to: number;
                        } | {
                            less_than_or_equal_to: number;
                        };
                    } | {
                        checkbox: {
                            equals: boolean;
                        } | {
                            does_not_equal: boolean;
                        };
                    } | {
                        select: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: string;
                        } | {
                            does_not_equal: string;
                        };
                    } | {
                        multi_select: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        relation: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        date: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: string;
                        } | {
                            before: string;
                        } | {
                            after: string;
                        } | {
                            on_or_before: string;
                        } | {
                            on_or_after: string;
                        } | {
                            past_week: {
                                [x: string]: never;
                            };
                        } | {
                            past_month: {
                                [x: string]: never;
                            };
                        } | {
                            past_year: {
                                [x: string]: never;
                            };
                        } | {
                            next_week: {
                                [x: string]: never;
                            };
                        } | {
                            next_month: {
                                [x: string]: never;
                            };
                        } | {
                            next_year: {
                                [x: string]: never;
                            };
                        };
                    } | {
                        people: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        files: {
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        };
                    };
                } | {
                    every: {
                        rich_text: {
                            equals: string;
                        } | {
                            does_not_equal: string;
                        } | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        } | {
                            starts_with: string;
                        } | {
                            ends_with: string;
                        } | ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        });
                    } | {
                        number: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: number;
                        } | {
                            does_not_equal: number;
                        } | {
                            greater_than: number;
                        } | {
                            less_than: number;
                        } | {
                            greater_than_or_equal_to: number;
                        } | {
                            less_than_or_equal_to: number;
                        };
                    } | {
                        checkbox: {
                            equals: boolean;
                        } | {
                            does_not_equal: boolean;
                        };
                    } | {
                        select: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: string;
                        } | {
                            does_not_equal: string;
                        };
                    } | {
                        multi_select: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        relation: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        date: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            equals: string;
                        } | {
                            before: string;
                        } | {
                            after: string;
                        } | {
                            on_or_before: string;
                        } | {
                            on_or_after: string;
                        } | {
                            past_week: {
                                [x: string]: never;
                            };
                        } | {
                            past_month: {
                                [x: string]: never;
                            };
                        } | {
                            past_year: {
                                [x: string]: never;
                            };
                        } | {
                            next_week: {
                                [x: string]: never;
                            };
                        } | {
                            next_month: {
                                [x: string]: never;
                            };
                        } | {
                            next_year: {
                                [x: string]: never;
                            };
                        };
                    } | {
                        people: ({
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        }) | {
                            contains: string;
                        } | {
                            does_not_contain: string;
                        };
                    } | {
                        files: {
                            is_empty: true;
                        } | {
                            is_not_empty: true;
                        };
                    };
                } | {
                    date: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: string;
                    } | {
                        before: string;
                    } | {
                        after: string;
                    } | {
                        on_or_before: string;
                    } | {
                        on_or_after: string;
                    } | {
                        past_week: {
                            [x: string]: never;
                        };
                    } | {
                        past_month: {
                            [x: string]: never;
                        };
                    } | {
                        past_year: {
                            [x: string]: never;
                        };
                    } | {
                        next_week: {
                            [x: string]: never;
                        };
                    } | {
                        next_month: {
                            [x: string]: never;
                        };
                    } | {
                        next_year: {
                            [x: string]: never;
                        };
                    };
                } | {
                    number: ({
                        is_empty: true;
                    } | {
                        is_not_empty: true;
                    }) | {
                        equals: number;
                    } | {
                        does_not_equal: number;
                    } | {
                        greater_than: number;
                    } | {
                        less_than: number;
                    } | {
                        greater_than_or_equal_to: number;
                    } | {
                        less_than_or_equal_to: number;
                    };
                };
                property: string;
                type?: "rollup" | undefined;
            })[];
        })[];
    };
};
/**
 * Compound filters, like `and` or `or`.
 * @category Query
 */
export declare type CompoundFilter = Exclude<Filter, PropertyFilter>;
/**
 * @category Query
 */
export declare type AndFilter = Extract<CompoundFilter, {
    and: any;
}>;
/**
 * @category Query
 */
export declare type OrFilter = Extract<CompoundFilter, {
    or: any;
}>;
/**
 * Sorting for a database query.
 * @category Query
 */
export declare type Sorts = NonNullable<QueryDatabaseParameters['sorts']>;
/**
 * A single sort in a database query.
 * @category Query
 */
export declare type Sort = Sorts[number];
/**
 * @category Query
 */
export declare type TimestampSort = Extract<Sort, {
    timestamp: any;
}>;
/**
 * @category Query
 */
export declare type PropertySort = Extract<Sort, {
    property: any;
}>;
/**
 * Sort builder functions.
 * @category Query
 */
export declare const Sort: {
    readonly property: {
        readonly ascending: (property: string) => PropertySort;
        readonly descending: (property: string) => PropertySort;
    };
    readonly created_time: {
        readonly ascending: {
            readonly timestamp: "created_time";
            readonly direction: "ascending";
        };
        readonly descending: {
            readonly timestamp: "created_time";
            readonly direction: "descending";
        };
    };
    readonly last_edited_time: {
        readonly ascending: {
            readonly timestamp: "last_edited_time";
            readonly direction: "ascending";
        };
        readonly descending: {
            readonly timestamp: "last_edited_time";
            readonly direction: "descending";
        };
    };
};
declare type AnyProperty = Page['properties'][string];
/**
 * The type of a property.
 * @category Property
 */
export declare type PropertyType = AnyProperty['type'];
/**
 * A property of a Notion page.
 * @category Property
 */
export declare type Property<Type extends PropertyType = PropertyType> = Extract<AnyProperty, {
    type: Type;
}>;
declare type PropertyTypeMap = {
    [K in PropertyType]: Property<K>;
};
/**
 * Type-level map from property type to the data of that property.
 * @category Property
 * @source
 */
export declare type PropertyDataMap = {
    [K in PropertyType]: PropertyTypeMap[K] extends {
        [key in K]: unknown;
    } ? PropertyTypeMap[K][K] : never;
};
/**
 * @category Property
 */
export declare type SelectPropertyValue = NonNullable<PropertyDataMap['select']>;
/**
 * @category Property
 */
export declare type MultiSelectPropertyValue = NonNullable<PropertyDataMap['multi_select']>;
/**
 * Generic way to get a property's data.
 * Suggested usage is with a switch statement on property.type to narrow the
 * result.
 *
 * ```
 * switch (prop.type) {
 *   case 'title':
 *   case 'rich_text':
 *     getPropertyData(prop).forEach((token) => fn(token));
 *     break;
 *   // ...
 * }
 * ```
 * @category Property
 */
export declare function getPropertyData<Type extends PropertyType>(property: Property<Type>): PropertyDataMap[Type];
declare type AnyFormulaPropertyValue = PropertyDataMap['formula'];
/**
 * @category Property
 */
export declare type FormulaPropertyValueType = AnyFormulaPropertyValue['type'];
/**
 * @category Property
 */
export declare type FormulaPropertyValue<Type extends FormulaPropertyValueType = FormulaPropertyValueType> = Extract<AnyFormulaPropertyValue, {
    type: Type;
}>;
/**
 * @category Property
 */
export declare type FormulaPropertyValueData = string | number | boolean | DateResponse | null;
/**
 * @category Property
 */
export declare function getFormulaPropertyValueData(propertyValue: FormulaPropertyValue): FormulaPropertyValueData;
/**
 * A pointer to a property in a Notion API page. The property will by looked up
 * by `name`, or `id` if given.
 *
 * The database property in Notion must have the matching `propertyType` to
 * match the pointer. Otherwise, it will be the same as a non-existent property.
 * See [[getPropertyValue]].
 * @category Property
 */
export interface PropertyPointer<Type extends PropertyType = PropertyType> {
    /** Type of the property. If the named property doesn't have this type, the PropertyPointer won't match it. */
    type: Type;
    /** Name of the property */
    name: string;
    /** ID of the property */
    id?: string;
}
/**
 * A pointer to a property in a Notion API page of any property type that has
 * `T` as the property data.
 * @category Property
 */
export declare type PropertyPointerWithOutput<
/** The output data type of the property */
T> = {
    [P in keyof PropertyDataMap]: PropertyDataMap[P] extends T | null ? PropertyPointer<P> : never;
}[PropertyType];
/**
 * Get the property with `name` and/or `id` from `page`.
 * @param page
 * @param property Which property?
 * @returns The property with that name or id, or undefined if not found.
 * @category Property
 */
export declare function getProperty(page: Page, { name, id }: Pick<PropertyPointer, 'name' | 'id'>): Property | undefined;
/**
 * Get the value of property `propertyPointer` in `page`.
 * @returns The value of the property, or `undefined` if the property isn't found, or has a different type.
 * @category Property
 */
export declare function getPropertyValue<Type extends PropertyType>(page: Page, propertyPointer: PropertyPointer<Type>): PropertyDataMap[Type] | undefined;
/**
 * Get the value of property `propertyPointer` in `page`, transformed by `transform`.
 * @returns The result of `as(propertyValue)`, or `undefined` if the property isn't found or has a different type.
 * @category Property
 */
export declare function getPropertyValue<Type extends PropertyType, T>(page: Page, propertyPointer: PropertyPointer<Type>, transform: (propertyValue: PropertyDataMap[Type]) => T): T | undefined;
/**
 * Get the value of property `propertyPointer` in `page`.
 * @returns The value of the property, or `undefined` if the property isn't found, or has a different type.
 * @category Property
 */
export declare function getPropertyValue<T>(page: Page, propertyPointer: PropertyPointerWithOutput<T>): T | undefined;
/**
 * Get the value of property `propertyPointer` in `page`, transformed by `transform`.
 * @returns The result of `as(propertyValue)`, or `undefined` if the property isn't found or has a different type.
 * @category Property
 */
export declare function getPropertyValue<P, T>(page: Page, propertyPointer: PropertyPointerWithOutput<P>, transform: (propertyValue: P) => T): T | undefined;
/**
 * A full database from the Notion API.
 * @category Database
 */
export declare type Database = Extract<GetDatabaseResponse, {
    title: unknown;
}>;
/**
 * The Notion API may return a "partial" database object if your API token doesn't
 * have permission for the full database.
 *
 * This function confirms that all database data is available.
 * @category Database
 */
export declare function isFullDatabase(database: GetDatabaseResponse): database is Database;
/**
 * The properties that a [[Database]] has.
 * @category Database
 */
export declare type DatabaseSchema = Database['properties'];
declare type AnyPropertySchema = DatabaseSchema[string];
/**
 * A property type of the pages in a [[Database]]. Think of this like a column
 * in a SQL database.
 *
 * **WARNING**: the documented name of this is "Property",
 * **WARNING**: the documented name of page properties is "PropertyValue".
 * @category Database
 */
export declare type PropertySchema<Type extends PropertyType = PropertyType> = Extract<AnyPropertySchema, {
    type: Type;
}>;
declare type PropertySchemaTypeMap = {
    [K in PropertyType]: PropertySchema<K>;
};
/**
 * Type-level map from property type to the schema data of that property.
 * @category Database
 * @source
 */
export declare type PropertySchemaDataMap = {
    [K in PropertyType]: PropertySchemaTypeMap[K] extends {
        [key in K]: unknown;
    } ? PropertySchemaTypeMap[K][K] : never;
};
/**
 * Get the type-specific schema data of `propertySchema`.
 * @param propertySchema
 * @returns
 * @category Database
 */
export declare function getPropertySchemaData<Type extends PropertyType>(propertySchema: PropertySchema<Type>): PropertySchemaDataMap[Type];
/**
 * A partial [[PropertySchema]] that contains at least the `type` field.
 * Used to create a [[PartialDatabaseSchema]].
 * @category Database
 */
export declare type PartialPropertySchema<Type extends PropertyType = PropertyType> = Partial<PropertySchema<Type>> & {
    name: string;
    type: Type;
};
/**
 * A partial [[DatabaseSchema]] that contains at least the `type` field of any defined property.
 * @category Database
 */
export declare type PartialDatabaseSchema = Record<string, PartialPropertySchema>;
/**
 * Used in [[inferDatabaseSchema]].
 * @category Database
 */
export declare type PartialDatabaseSchemaWithOnlyType = Record<string, Partial<PropertySchema> & {
    type: PropertyType;
}>;
/**
 * Used in [[inferDatabaseSchema]].
 * @category Database
 */
export declare type PartialDatabaseSchemaFromSchemaWithOnlyType<T extends PartialDatabaseSchemaWithOnlyType> = Assert<PartialDatabaseSchema, {
    [K in keyof T]: T[K] & PartialPropertySchema<T[K]['type']>;
}>;
/**
 * This function helps you infer a concrete subtype of [[PartialDatabaseSchema]]
 * for use with other APIs in this package. It will fill in missing `name`
 * fields of each [[PartialPropertySchema]] with the object's key.
 *
 * Use the fields of the returned schema to access a page's properties via
 * [[getPropertyValue]] or [[getProperty]].
 *
 * You can check or update your inferred schema against data fetched from the
 * API with [[compareDatabaseSchema]].
 *
 * ```typescript
 * const mySchema = inferDatabaseSchema({
 *   Title: { type: 'title' },
 *   SubTitle: { type: 'rich_text', name: 'Subtitle' },
 *   PublishedDate: { type: 'date', name: 'Published Date' },
 *   IsPublished: {
 *     type: 'checkbox',
 *     name: 'Show In Production',
 *     id: 'asdf123',
 *   },
 * });
 *
 * // inferDatabaseSchema infers a concrete type with the same shape as the input,
 * // so you can reference properties easily. It also adds `name` to each [[PropertySchema]]
 * // based on the key name.
 * console.log(mySchema.Title.name); // "Title"
 *
 * // You can use the properties in the inferred schema to access the corresponding
 * // property value on a Page.
 * for await (const page of iteratePaginatedAPI(notion.databases.query, {
 *   database_id,
 * })) {
 *   if (isFullPage(page)) {
 *     const titleRichText = getPropertyValue(page, mySchema.Title);
 *     console.log('Title: ', richTextAsPlainText(titleRichText));
 *     const isPublished = getPropertyValue(page, mySchema.IsPublished);
 *     console.log('Is published: ', isPublished);
 *   }
 * }
 * ```
 *
 * @param schema A partial database schema object literal.
 * @returns The inferred PartialDatabaseSchema subtype.
 * @category Database
 */
export declare function inferDatabaseSchema<T extends PartialDatabaseSchemaWithOnlyType>(schema: T): PartialDatabaseSchemaFromSchemaWithOnlyType<T>;
declare type PropertyDiffPointer = Pick<PropertyPointer, 'name' | 'id'>;
/**
 * @category Database
 */
export declare type DatabaseSchemaDiff<Before extends PartialDatabaseSchema, After extends PartialDatabaseSchema> = {
    /** Key in the database schema differs, but has same name/id. */
    type: 'key';
    property: PropertyDiffPointer;
    before: keyof Before;
    after: keyof After;
} | {
    /** A property previously didn't have an ID, but now does */
    type: `property.id.${'added' | 'removed'}`;
    property: {
        name: string;
    };
    id: string;
} | {
    /** Type of the property differs, but has same name/id. */
    type: 'property.type';
    property: PropertyDiffPointer;
    before: PropertyType;
    after: PropertyType;
} | {
    /**
     * Property name changed. This is only detectable if the property has a
     * defined ID in both before and after.
     */
    type: 'property.name';
    property: {
        id: string;
    };
    before: string;
    after: string;
} | {
    /**
     * Schema of a property's data changed, eg the options of a multi_select.
     * This diff is only available if both `before` and `after` have a fully
     * defined PropertySchema with data.
     */
    type: 'property.schema';
    before: PropertySchema;
    after: PropertySchema;
} | {
    /** Property in `before`, but `after` has no property with same name/id. */
    type: 'removed';
    property: Assert<PropertyDiffPointer, PartialPropertySchema>;
    before: keyof Before;
} | {
    /** Property in `after`, but `before` has no property with same name/id. */
    type: 'added';
    property: Assert<PropertyDiffPointer, PartialPropertySchema>;
    after: keyof After;
};
/**
 * Diff a `before` and `after` database schemas.
 *
 * You can use this to validate an inferred schema literal against the actual
 * schema fetched from the Notion API.
 *
 * ```typescript
 * const mySchema = inferDatabaseSchema({
 *   Title: { type: 'title' },
 *   SubTitle: { type: 'rich_text', name: 'Subtitle' },
 *   PublishedDate: { type: 'date', name: 'Published Date' },
 *   IsPublished: {
 *     type: 'checkbox',
 *     name: 'Show In Production',
 *     id: 'asdf123',
 *   },
 * });
 *
 * // Print schema differences between our literal and the API.
 * const database = await notion.databases.retrieve({ database_id });
 * const diffs = diffDatabaseSchemas({ before: mySchema, after: database.properties });
 * for (const change of diffs) {
 *   console.log(
 *     databaseSchemaDiffToString(change, { beforeName: "mySchema", afterName: "API database" })
 *   );
 * }
 * ```
 *
 * @returns An array of diffs between the `before` and `after` schemas.
 * @warning This is O(N * M) over length of the schemas currently, but may be optimized in the future.
 * @category Database
 */
export declare function diffDatabaseSchemas<Before extends PartialDatabaseSchema, After extends PartialDatabaseSchema>(args: {
    before: Before;
    after: After;
}): DatabaseSchemaDiff<Before, After>[];
/**
 * See [[diffDatabaseSchemas]].
 * @returns A string describing a diff between two database schemas.
 * @category Database
 */
export declare function databaseSchemaDiffToString<Before extends PartialDatabaseSchema, After extends PartialDatabaseSchema>(diff: DatabaseSchemaDiff<Before, After>, options?: {
    /** Show "before" as this string */
    beforeName?: string;
    /** show "after" as this string */
    afterName?: string;
}): string;
/**
 * @category Database
 */
export declare type DatabasePropertyValues<T extends PartialDatabaseSchema> = {
    [K in keyof T]?: PropertyDataMap[T[K]['type']];
};
/**
 * Get all properties in a schema from the database.
 *
 * @category Property
 * @category Database
 */
export declare function getAllProperties<Schema extends PartialDatabaseSchema>(page: Page, schema: Schema): DatabasePropertyValues<Schema>;
